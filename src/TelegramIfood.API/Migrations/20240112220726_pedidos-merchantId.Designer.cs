// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TelegramIfood.API.Data;

#nullable disable

namespace TelegramIfood.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240112220726_pedidos-merchantId")]
    partial class pedidosmerchantId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TelegramIfood.API.Models.Estabelecimento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<Guid>("IfoodMerchantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Estabelecimentos");
                });

            modelBuilder.Entity("TelegramIfood.API.Models.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EstabelecimentoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("IdTelegram")
                        .HasColumnType("bigint");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("TelegramIfood.Events.Models.Ifood.IfoodPedidoDetalhe", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("displayId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("isTest")
                        .HasColumnType("bit");

                    b.Property<Guid>("merchantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("orderTiming")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("orderType")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("pedidoStatus")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("preparationStartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("salesChannel")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("totalPedido")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("id");

                    b.ToTable("PedidosIfood");
                });

            modelBuilder.Entity("TelegramIfood.Events.Models.Ifood.Item", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IfoodPedidoDetalheid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("index")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("optionsPrice")
                        .HasColumnType("int");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("totalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("uniqueId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("unit")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("unitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("id");

                    b.HasIndex("IfoodPedidoDetalheid");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("TelegramIfood.Events.Models.Ifood.Item", b =>
                {
                    b.HasOne("TelegramIfood.Events.Models.Ifood.IfoodPedidoDetalhe", null)
                        .WithMany("items")
                        .HasForeignKey("IfoodPedidoDetalheid");
                });

            modelBuilder.Entity("TelegramIfood.Events.Models.Ifood.IfoodPedidoDetalhe", b =>
                {
                    b.Navigation("items");
                });
#pragma warning restore 612, 618
        }
    }
}
